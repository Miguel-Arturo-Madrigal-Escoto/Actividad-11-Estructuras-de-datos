{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16  1  \cb3\cf16 #include "notation.h"
\par \cb1\cf0\ul0\i0\b0  2  
\par \cb1\cf0\ul0\i0\b0  3  \cb3\cf14\b using namespace \b0\cb3\cf16\b std\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  4  
\par \cb1\cf0\ul0\i0\b0  5  \cb1\cf0 Notation\cb3\cf25 ::\cb1\cf0 Notation\cb3\cf25 ()\{\};
\par \cb1\cf0\ul0\i0\b0  6  
\par \cb1\cf0\ul0\i0\b0  7  \cb1\cf0 Notation\cb3\cf25 ::\cb1\cf0 Notation\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 Notation\cb3\cf25 & \cb1\cf0 n\cb3\cf25 ): \cb1\cf0 myInfix\cb3\cf25 (\cb1\cf0 n\cb3\cf25 .\cb1\cf0 myInfix\cb3\cf25 ), \cb1\cf0 myPosfix\cb3\cf25 (\cb1\cf0 n\cb3\cf25 .\cb1\cf0 myPosfix\cb3\cf25 ),
\par \cb1\cf0\ul0\i0\b0  8  \cb1\cf0 myStack\cb3\cf25 (\cb1\cf0 n\cb3\cf25 .\cb1\cf0 myStack\cb3\cf25 ), \cb1\cf0 myInputString\cb3\cf25 (\cb1\cf0 n\cb3\cf25 .\cb1\cf0 myInputString\cb3\cf25 )\{\}
\par \cb1\cf0\ul0\i0\b0  9  
\par \cb1\cf0\ul0\i0\b0 10  \cb1\cf0 Notation\cb3\cf25 & \cb1\cf0 Notation\cb3\cf25 ::\cb3\cf14\b operator \b0\cb3\cf25 = (\cb3\cf14\b const \b0\cb1\cf0 Notation\cb3\cf25 & \cb1\cf0 n\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 11      \cb1\cf0 myInfix \cb3\cf25 = \cb1\cf0 n\cb3\cf25 .\cb1\cf0 myInfix\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 12      \cb1\cf0 myPosfix \cb3\cf25 = \cb1\cf0 n\cb3\cf25 .\cb1\cf0 myPosfix\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 13      \cb1\cf0 myStack \cb3\cf25 = \cb1\cf0 n\cb3\cf25 .\cb1\cf0 myStack\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 14      \cb1\cf0 myInputString \cb3\cf25 = \cb1\cf0 n\cb3\cf25 .\cb1\cf0 myInputString\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 15  
\par \cb1\cf0\ul0\i0\b0 16      \cb3\cf14\b return \b0\cb3\cf25 *\cb3\cf14\b this\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 17  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 18  \cb3\cf14\b void \b0\cb1\cf0 Notation\cb3\cf25 ::\cb1\cf0 setMyInputString\cb3\cf25 (\cb3\cf14\b const \b0\cb3\cf16\b string\b0\cb3\cf25 & \cb1\cf0 myInputString\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 19      \cb3\cf14\b this\b0\cb3\cf25 ->\cb1\cf0 myInputString \cb3\cf25 = \cb1\cf0 myInputString\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 20  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 21  \cb3\cf14\b void \b0\cb1\cf0 Notation\cb3\cf25 ::\cb1\cf0 enqueueMyInfix\cb3\cf25 ()\{
\par \cb1\cf0\ul0\i0\b0 22      \cb3\cf14\b for\b0\cb3\cf25 (\cb3\cf14\b size_t \b0\cb1\cf0 i\cb3\cf25 (\cb3\cf12 0\cb3\cf25 ); \cb1\cf0 i \cb3\cf25 <= \cb3\cf14\b this\b0\cb3\cf25 ->\cb1\cf0 myInputString\cb3\cf25 .\cb1\cf0 length\cb3\cf25 (); \cb1\cf0 i\cb3\cf25 ++)
\par \cb1\cf0\ul0\i0\b0 23          \cb3\cf14\b this\b0\cb3\cf25 ->\cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 enqueue\cb3\cf25 (\cb1\cf0 myInputString\cb3\cf25 [\cb1\cf0 i\cb3\cf25 ]);
\par \cb1\cf0\ul0\i0\b0 24  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 25  \cb3\cf14\b void \b0\cb1\cf0 Notation\cb3\cf25 ::\cb1\cf0 enqueueMyPosfix\cb3\cf25 ()\{
\par \cb1\cf0\ul0\i0\b0 26      \cb3\cf14\b while\b0\cb3\cf25 (!\cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 isEmpty\cb3\cf25 ())
\par \cb1\cf0\ul0\i0\b0 27          \cb3\cf14\b this\b0\cb3\cf25 ->\cb1\cf0 myPosfix\cb3\cf25 .\cb1\cf0 enqueue\cb3\cf25 (\cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 pop\cb3\cf25 ());
\par \cb1\cf0\ul0\i0\b0 28  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 29  \cb3\cf14\b void \b0\cb1\cf0 Notation\cb3\cf25 ::\cb1\cf0 toPosfix\cb3\cf25 ()\{
\par \cb1\cf0\ul0\i0\b0 30      \cb3\cf14\b while\b0\cb3\cf25 (!\cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 isEmpty\cb3\cf25 ())\{
\par \cb1\cf0\ul0\i0\b0 31          \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 isalnum\cb3\cf25 (\cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 getFront\cb3\cf25 ()))
\par \cb1\cf0\ul0\i0\b0 32              \cb3\cf14\b this\b0\cb3\cf25 ->\cb1\cf0 myPosfix\cb3\cf25 .\cb1\cf0 enqueue\cb3\cf25 (\cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 getFront\cb3\cf25 ());
\par \cb1\cf0\ul0\i0\b0 33          \cb3\cf14\b else if\b0\cb3\cf25 (\cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 getFront\cb3\cf25 () == \cb3\cf22 '('\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0 34              \cb3\cf14\b this\b0\cb3\cf25 ->\cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 push\cb3\cf25 (\cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 getFront\cb3\cf25 ());
\par \cb1\cf0\ul0\i0\b0 35          \cb3\cf14\b else if\b0\cb3\cf25 (\cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 getFront\cb3\cf25 () == \cb3\cf22 ')'\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 36              \cb3\cf14\b try\b0\cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 37                  \cb3\cf14\b while\b0\cb3\cf25 (\cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 getTop\cb3\cf25 () != \cb3\cf22 '(' \cb3\cf25 || \cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 isEmpty\cb3\cf25 ())
\par \cb1\cf0\ul0\i0\b0 38                      \cb3\cf14\b this\b0\cb3\cf25 ->\cb1\cf0 myPosfix\cb3\cf25 .\cb1\cf0 enqueue\cb3\cf25 (\cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 pop\cb3\cf25 ());
\par \cb1\cf0\ul0\i0\b0 39                  \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 getTop\cb3\cf25 () == \cb3\cf22 '('\cb3\cf25 )
\par \cb1\cf0\ul0\i0\b0 40                      \cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 pop\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 41              \cb3\cf25 \}\cb3\cf14\b catch\b0\cb3\cf25 (\cb3\cf14\b typename \b0\cb1\cf0 Stack\cb3\cf25 <\cb3\cf14\b char\b0\cb3\cf25 >::\cb1\cf0 Exception ex\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 42                  \cb1\cf0 ex\cb3\cf25 .\cb1\cf0 what\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 43              \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 44          \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 45          \cb3\cf14\b else if\b0\cb3\cf25 ( \cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 getFront\cb3\cf25 () == \cb3\cf22 '-' \cb3\cf25 || \cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 getFront\cb3\cf25 () == \cb3\cf22 '+' \cb3\cf25 || \cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 getFront\cb3\cf25 () == \cb3\cf22 '*' \cb3\cf25 || \cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 getFront\cb3\cf25 () == \cb3\cf22 '/' \cb3\cf25 || \cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 getFront\cb3\cf25 () == \cb3\cf22 '^' \cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 46              \cb3\cf14\b try\b0\cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 47                  \cb3\cf14\b while\b0\cb3\cf25 (\cb1\cf0 getPriority\cb3\cf25 (\cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 getTop\cb3\cf25 ()) >= \cb1\cf0 getPriority\cb3\cf25 (\cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 getFront\cb3\cf25 ()) && (\cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 getTop\cb3\cf25 ()!=\cb3\cf22 '(' \cb3\cf25 || \cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 isEmpty\cb3\cf25 ()))
\par \cb1\cf0\ul0\i0\b0 48                      \cb3\cf14\b this\b0\cb3\cf25 ->\cb1\cf0 myPosfix\cb3\cf25 .\cb1\cf0 enqueue\cb3\cf25 (\cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 pop\cb3\cf25 ());
\par \cb1\cf0\ul0\i0\b0 49  
\par \cb1\cf0\ul0\i0\b0 50              \cb3\cf25 \}\cb3\cf14\b catch\b0\cb3\cf25 (\cb3\cf14\b typename \b0\cb1\cf0 Stack\cb3\cf25 <\cb3\cf14\b char\b0\cb3\cf25 >::\cb1\cf0 Exception ex\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 51                  \cb1\cf0 ex\cb3\cf25 .\cb1\cf0 what\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 52              \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 53              \cb3\cf14\b this\b0\cb3\cf25 ->\cb1\cf0 myStack\cb3\cf25 .\cb1\cf0 push\cb3\cf25 (\cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 getFront\cb3\cf25 ());
\par \cb1\cf0\ul0\i0\b0 54          \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 55          \cb1\cf0 myInfix\cb3\cf25 .\cb1\cf0 dequeue\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 56      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 57  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 58  
\par \cb1\cf0\ul0\i0\b0 59  \cb3\cf16\b string \b0\cb1\cf0 Notation\cb3\cf25 ::\cb1\cf0 toString\cb3\cf25 ()\{
\par \cb1\cf0\ul0\i0\b0 60      \cb3\cf16\b string \b0\cb1\cf0 myResult\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 61  
\par \cb1\cf0\ul0\i0\b0 62      \cb1\cf0 enqueueMyInfix\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 63      \cb1\cf0 toPosfix\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 64      \cb1\cf0 enqueueMyPosfix\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 65  
\par \cb1\cf0\ul0\i0\b0 66      \cb1\cf0 Queue \cb3\cf25 <\cb3\cf14\b char\b0\cb3\cf25 > \cb1\cf0 myCopyQueue\cb3\cf25 (\cb1\cf0 myPosfix\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 67  
\par \cb1\cf0\ul0\i0\b0 68      \cb3\cf14\b while\b0\cb3\cf25 (!\cb1\cf0 myCopyQueue\cb3\cf25 .\cb1\cf0 isEmpty\cb3\cf25 ())
\par \cb1\cf0\ul0\i0\b0 69          \cb1\cf0 myResult \cb3\cf25 += \cb1\cf0 myCopyQueue\cb3\cf25 .\cb1\cf0 dequeue\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 70  
\par \cb1\cf0\ul0\i0\b0 71      \cb3\cf14\b return \b0\cb1\cf0 myResult\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 72  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 73  
\par \cb1\cf0\ul0\i0\b0 74  \cb3\cf14\b int \b0\cb1\cf0 Notation\cb3\cf25 ::\cb1\cf0 getPriority\cb3\cf25 (\cb3\cf14\b const char\b0\cb3\cf25 & \cb1\cf0 c\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 75  
\par \cb1\cf0\ul0\i0\b0 76      \cb3\cf14\b switch\b0\cb3\cf25 (\cb1\cf0 c\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 77          \cb3\cf14\b case \b0\cb3\cf22 '+'\cb3\cf25 : \cb3\cf14\b return \b0\cb3\cf12 1\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 78          \cb3\cf14\b case \b0\cb3\cf22 '-'\cb3\cf25 : \cb3\cf14\b return \b0\cb3\cf12 1\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 79          \cb3\cf14\b case \b0\cb3\cf22 '*'\cb3\cf25 : \cb3\cf14\b return \b0\cb3\cf12 2\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 80          \cb3\cf14\b case \b0\cb3\cf22 '/'\cb3\cf25 : \cb3\cf14\b return \b0\cb3\cf12 2\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 81          \cb3\cf14\b case \b0\cb3\cf22 '^'\cb3\cf25 : \cb3\cf14\b return \b0\cb3\cf12 3\cb3\cf25 ; \cb3\cf14\b break\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 82      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 83  
\par \cb1\cf0\ul0\i0\b0 84      \cb3\cf14\b return \b0\cb3\cf12 0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 85  \cb3\cf25 \}
\par }