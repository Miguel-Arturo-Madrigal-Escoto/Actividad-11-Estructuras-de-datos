{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16  1  \cb3\cf16 #ifndef NOTATION_H_INCLUDED
\par \cb1\cf0\ul0\i0\b0  2  \cb3\cf16 #define NOTATION_H_INCLUDED
\par \cb1\cf0\ul0\i0\b0  3  
\par \cb1\cf0\ul0\i0\b0  4  \cb3\cf16 #include <iostream>
\par \cb1\cf0\ul0\i0\b0  5  \cb3\cf16 #include <string>
\par \cb1\cf0\ul0\i0\b0  6  \cb3\cf16 #include "stack.h"
\par \cb1\cf0\ul0\i0\b0  7  \cb3\cf16 #include "queue.h"
\par \cb1\cf0\ul0\i0\b0  8  
\par \cb1\cf0\ul0\i0\b0  9  \cb3\cf14\b class \b0\cb1\cf0 Notation\cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 10  \cb3\cf14\b private\b0\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0 11      \cb1\cf0 Queue \cb3\cf25 <\cb3\cf14\b char\b0\cb3\cf25 > \cb1\cf0 myInfix\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 12      \cb1\cf0 Queue \cb3\cf25 <\cb3\cf14\b char\b0\cb3\cf25 > \cb1\cf0 myPosfix\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 13      \cb1\cf0 Stack \cb3\cf25 <\cb3\cf14\b char\b0\cb3\cf25 > \cb1\cf0 myStack\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 14      \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b string \b0\cb1\cf0 myInputString\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 15  
\par \cb1\cf0\ul0\i0\b0 16  \cb3\cf14\b public\b0\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0 17      \cb1\cf0 Notation\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 18      \cb1\cf0 Notation\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 Notation\cb3\cf25 &);
\par \cb1\cf0\ul0\i0\b0 19  
\par \cb1\cf0\ul0\i0\b0 20      \cb3\cf14\b void \b0\cb1\cf0 setMyInputString\cb3\cf25 (\cb3\cf14\b const \b0\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b string\b0\cb3\cf25 &);
\par \cb1\cf0\ul0\i0\b0 21  
\par \cb1\cf0\ul0\i0\b0 22      \cb3\cf14\b void \b0\cb1\cf0 enqueueMyInfix\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 23      \cb3\cf14\b void \b0\cb1\cf0 enqueueMyPosfix\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 24      \cb3\cf14\b void \b0\cb1\cf0 pushMyOperators\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 25      \cb3\cf14\b void \b0\cb1\cf0 toPosfix\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 26  
\par \cb1\cf0\ul0\i0\b0 27      \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b string \b0\cb1\cf0 toString\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 28      \cb3\cf14\b int \b0\cb1\cf0 getPriority\cb3\cf25 (\cb3\cf14\b const char\b0\cb3\cf25 &);
\par \cb1\cf0\ul0\i0\b0 29  
\par \cb1\cf0\ul0\i0\b0 30      \cb1\cf0 Notation\cb3\cf25 & \cb3\cf14\b operator \b0\cb3\cf25 = (\cb3\cf14\b const \b0\cb1\cf0 Notation\cb3\cf25 &);
\par \cb1\cf0\ul0\i0\b0 31  
\par \cb1\cf0\ul0\i0\b0 32  \cb3\cf25 \};
\par \cb1\cf0\ul0\i0\b0 33  
\par \cb1\cf0\ul0\i0\b0 34  
\par \cb1\cf0\ul0\i0\b0 35  \cb3\cf16 #endif \cb3\cf4 // NOTATION_H_INCLUDED
\par }