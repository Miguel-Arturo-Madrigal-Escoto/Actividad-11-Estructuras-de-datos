{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red152\green152\blue217;\red192\green192\blue192;\red128\green128\blue255;\red170\green170\blue240;\red0\green128\blue128;\red107\green153\blue153;\red128\green0\blue0;\red172\green89\blue89;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red64\green64\blue128;\red133\green133\blue172;\red128\green255\blue255;\red55\green55\blue55;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16   1  \cb3\cf16 #ifndef STACK_H_INCLUDED
\par \cb1\cf0\ul0\i0\b0   2  \cb3\cf16 #define STACK_H_INCLUDED
\par \cb1\cf0\ul0\i0\b0   3  
\par \cb1\cf0\ul0\i0\b0   4  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0   5  \cb3\cf14\b class \b0\cb1\cf0 Stack\cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0   6    \cb3\cf14\b private\b0\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0   7      \cb3\cf14\b class \b0\cb1\cf0 Node\cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0   8          \cb3\cf14\b private\b0\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0   9            \cb1\cf0 T data\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  10            \cb1\cf0 Node\cb3\cf25 * \cb1\cf0 next\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  11  
\par \cb1\cf0\ul0\i0\b0  12          \cb3\cf14\b public\b0\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0  13            \cb1\cf0 Node\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  14            \cb1\cf0 Node\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 T\cb3\cf25 &);
\par \cb1\cf0\ul0\i0\b0  15  
\par \cb1\cf0\ul0\i0\b0  16            \cb1\cf0 T getData\cb3\cf25 () \cb3\cf14\b const\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  17            \cb1\cf0 Node\cb3\cf25 * \cb1\cf0 getNext\cb3\cf25 () \cb3\cf14\b const\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  18  
\par \cb1\cf0\ul0\i0\b0  19            \cb3\cf14\b void \b0\cb1\cf0 setData\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 T\cb3\cf25 &);
\par \cb1\cf0\ul0\i0\b0  20            \cb3\cf14\b void \b0\cb1\cf0 setNext\cb3\cf25 (\cb1\cf0 Node\cb3\cf25 *);
\par \cb1\cf0\ul0\i0\b0  21      \cb3\cf25 \};
\par \cb1\cf0\ul0\i0\b0  22  
\par \cb1\cf0\ul0\i0\b0  23      \cb1\cf0 Node\cb3\cf25 * \cb1\cf0 anchor\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  24  
\par \cb1\cf0\ul0\i0\b0  25      \cb3\cf14\b void \b0\cb1\cf0 copyAll\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 Stack\cb3\cf25 &);
\par \cb1\cf0\ul0\i0\b0  26  
\par \cb1\cf0\ul0\i0\b0  27      \cb3\cf14\b void \b0\cb1\cf0 deleteAll\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  28  
\par \cb1\cf0\ul0\i0\b0  29    \cb3\cf14\b public\b0\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0  30      \cb3\cf14\b class \b0\cb1\cf0 Exception \cb3\cf25 : \cb3\cf14\b public \b0\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b exception\b0\cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  31        \cb3\cf14\b private\b0\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0  32          \cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b string \b0\cb1\cf0 msg\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  33  
\par \cb1\cf0\ul0\i0\b0  34        \cb3\cf14\b public\b0\cb3\cf25 :
\par \cb1\cf0\ul0\i0\b0  35          \cb3\cf14\b explicit \b0\cb1\cf0 Exception\cb3\cf25 (\cb3\cf14\b const char\b0\cb3\cf25 * \cb1\cf0 message\cb3\cf25 ) : \cb1\cf0 msg\cb3\cf25 (\cb1\cf0 message\cb3\cf25 )\{\}
\par \cb1\cf0\ul0\i0\b0  36  
\par \cb1\cf0\ul0\i0\b0  37          \cb3\cf14\b explicit \b0\cb1\cf0 Exception\cb3\cf25 (\cb3\cf14\b const \b0\cb3\cf16\b std\b0\cb3\cf25 ::\cb3\cf16\b string\b0\cb3\cf25 & \cb1\cf0 message\cb3\cf25 ) : \cb1\cf0 msg\cb3\cf25 (\cb1\cf0 message\cb3\cf25 )\{\}
\par \cb1\cf0\ul0\i0\b0  38  
\par \cb1\cf0\ul0\i0\b0  39          \cb3\cf14\b virtual \b0\cb3\cf25 ~\cb1\cf0 Exception\cb3\cf25 () \cb3\cf14\b throw\b0\cb3\cf25 ()\{\}
\par \cb1\cf0\ul0\i0\b0  40  
\par \cb1\cf0\ul0\i0\b0  41          \cb3\cf14\b virtual const char\b0\cb3\cf25 * \cb1\cf0 what\cb3\cf25 () \cb3\cf14\b const throw\b0\cb3\cf25 () \{
\par \cb1\cf0\ul0\i0\b0  42              \cb3\cf14\b return \b0\cb1\cf0 msg\cb3\cf25 .\cb1\cf0 c_str\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  43          \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  44      \cb3\cf25 \};
\par \cb1\cf0\ul0\i0\b0  45  
\par \cb1\cf0\ul0\i0\b0  46      \cb1\cf0 Stack\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  47      \cb1\cf0 Stack\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 Stack\cb3\cf25 &);
\par \cb1\cf0\ul0\i0\b0  48  
\par \cb1\cf0\ul0\i0\b0  49      \cb3\cf25 ~\cb1\cf0 Stack\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  50  
\par \cb1\cf0\ul0\i0\b0  51      \cb3\cf14\b bool \b0\cb1\cf0 isEmpty\cb3\cf25 () \cb3\cf14\b const\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  52  
\par \cb1\cf0\ul0\i0\b0  53      \cb3\cf14\b void \b0\cb1\cf0 push\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 T\cb3\cf25 &);
\par \cb1\cf0\ul0\i0\b0  54  
\par \cb1\cf0\ul0\i0\b0  55      \cb1\cf0 T pop\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0  56  
\par \cb1\cf0\ul0\i0\b0  57      \cb1\cf0 T getTop\cb3\cf25 () \cb3\cf14\b const\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  58  
\par \cb1\cf0\ul0\i0\b0  59      \cb1\cf0 Stack\cb3\cf25 & \cb3\cf14\b operator \b0\cb3\cf25 = (\cb3\cf14\b const \b0\cb1\cf0 Stack\cb3\cf25 &);
\par \cb1\cf0\ul0\i0\b0  60  \cb3\cf25 \};
\par \cb1\cf0\ul0\i0\b0  61  
\par \cb1\cf0\ul0\i0\b0  62  \cb3\cf6\b ///Node
\par \cb1\cf0\ul0\i0\b0  63  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0  64  \cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Node\cb3\cf25 ::\cb1\cf0 Node\cb3\cf25 () : \cb1\cf0 next\cb3\cf25 (\cb3\cf14\b nullptr\b0\cb3\cf25 ) \{\}
\par \cb1\cf0\ul0\i0\b0  65  
\par \cb1\cf0\ul0\i0\b0  66  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0  67  \cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Node\cb3\cf25 ::\cb1\cf0 Node\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 T\cb3\cf25 & \cb1\cf0 e\cb3\cf25 ) : \cb1\cf0 data\cb3\cf25 (\cb1\cf0 e\cb3\cf25 ), \cb1\cf0 next\cb3\cf25 (\cb3\cf14\b nullptr\b0\cb3\cf25 )\{\}
\par \cb1\cf0\ul0\i0\b0  68  
\par \cb1\cf0\ul0\i0\b0  69  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0  70  \cb1\cf0 T Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Node\cb3\cf25 ::\cb1\cf0 getData\cb3\cf25 () \cb3\cf14\b const \b0\cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  71      \cb3\cf14\b return \b0\cb1\cf0 data\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  72  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  73  
\par \cb1\cf0\ul0\i0\b0  74  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0  75  \cb3\cf14\b typename \b0\cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Node\cb3\cf25 * \cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Node\cb3\cf25 ::\cb1\cf0 getNext\cb3\cf25 () \cb3\cf14\b const \b0\cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0  76      \cb3\cf14\b return \b0\cb1\cf0 next\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  77  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  78  
\par \cb1\cf0\ul0\i0\b0  79  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0  80  \cb3\cf14\b void \b0\cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Node\cb3\cf25 ::\cb1\cf0 setData\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 T\cb3\cf25 & \cb1\cf0 e\cb3\cf25 ) \{
\par \cb1\cf0\ul0\i0\b0  81      \cb1\cf0 data \cb3\cf25 = \cb1\cf0 e\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  82  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  83  
\par \cb1\cf0\ul0\i0\b0  84  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0  85  \cb3\cf14\b void \b0\cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Node\cb3\cf25 ::\cb1\cf0 setNext\cb3\cf25 (\cb1\cf0 Node\cb3\cf25 * \cb1\cf0 p\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0  86      \cb1\cf0 next \cb3\cf25 = \cb1\cf0 p\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  87  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0  88  
\par \cb1\cf0\ul0\i0\b0  89  \cb3\cf6\b /// Stack
\par \cb1\cf0\ul0\i0\b0  90  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0  91  \cb3\cf14\b void \b0\cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 copyAll\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 Stack\cb3\cf25 & \cb1\cf0 s\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0  92      \cb1\cf0 Node\cb3\cf25 * \cb1\cf0 aux\cb3\cf25 (\cb1\cf0 s\cb3\cf25 .\cb1\cf0 anchor\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0  93      \cb1\cf0 Node\cb3\cf25 * \cb1\cf0 last\cb3\cf25 (\cb3\cf14\b nullptr\b0\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0  94      \cb1\cf0 Node\cb3\cf25 * \cb1\cf0 newNode\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0  95  
\par \cb1\cf0\ul0\i0\b0  96      \cb3\cf14\b while\b0\cb3\cf25 (\cb1\cf0 aux \cb3\cf25 != \cb3\cf14\b nullptr\b0\cb3\cf25 ) \{
\par \cb1\cf0\ul0\i0\b0  97          \cb1\cf0 newNode \cb3\cf25 = \cb3\cf14\b new \b0\cb1\cf0 Node\cb3\cf25 (\cb1\cf0 aux\cb3\cf25 ->\cb1\cf0 getData\cb3\cf25 ());
\par \cb1\cf0\ul0\i0\b0  98  
\par \cb1\cf0\ul0\i0\b0  99          \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 newNode \cb3\cf25 == \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 100              \cb3\cf14\b throw \b0\cb1\cf0 Exception\cb3\cf25 (\cb3\cf20 "Memoria no disponible, copyAll"\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 101          \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 102  
\par \cb1\cf0\ul0\i0\b0 103          \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 last \cb3\cf25 == \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 104              \cb1\cf0 anchor \cb3\cf25 = \cb1\cf0 newNode\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 105          \cb3\cf25 \}\cb3\cf14\b else\b0\cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 106              \cb1\cf0 last\cb3\cf25 ->\cb1\cf0 setNext\cb3\cf25 (\cb1\cf0 newNode\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 107          \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 108  
\par \cb1\cf0\ul0\i0\b0 109          \cb1\cf0 last \cb3\cf25 = \cb1\cf0 newNode\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 110          \cb1\cf0 aux \cb3\cf25 = \cb1\cf0 aux\cb3\cf25 ->\cb1\cf0 getNext\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 111      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 112  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 113  
\par \cb1\cf0\ul0\i0\b0 114  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0 115  \cb3\cf14\b void \b0\cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 deleteAll\cb3\cf25 ()\{
\par \cb1\cf0\ul0\i0\b0 116      \cb1\cf0 Node\cb3\cf25 * \cb1\cf0 aux\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 117  
\par \cb1\cf0\ul0\i0\b0 118      \cb3\cf14\b while\b0\cb3\cf25 (\cb1\cf0 anchor \cb3\cf25 != \cb3\cf14\b nullptr\b0\cb3\cf25 ) \{
\par \cb1\cf0\ul0\i0\b0 119          \cb1\cf0 aux \cb3\cf25 = \cb1\cf0 anchor\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 120  
\par \cb1\cf0\ul0\i0\b0 121          \cb1\cf0 anchor \cb3\cf25 = \cb1\cf0 anchor\cb3\cf25 ->\cb1\cf0 getNext\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 122  
\par \cb1\cf0\ul0\i0\b0 123          \cb3\cf14\b delete \b0\cb1\cf0 aux\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 124      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 125  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 126  
\par \cb1\cf0\ul0\i0\b0 127  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0 128  \cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Stack\cb3\cf25 () : \cb1\cf0 anchor\cb3\cf25 (\cb3\cf14\b nullptr\b0\cb3\cf25 ) \{\}
\par \cb1\cf0\ul0\i0\b0 129  
\par \cb1\cf0\ul0\i0\b0 130  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0 131  \cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 Stack\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 Stack\cb3\cf25 & \cb1\cf0 s\cb3\cf25 ) : \cb1\cf0 anchor\cb3\cf25 (\cb3\cf14\b nullptr\b0\cb3\cf25 ) \{
\par \cb1\cf0\ul0\i0\b0 132      \cb1\cf0 copyAll\cb3\cf25 (\cb1\cf0 s\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 133  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 134  
\par \cb1\cf0\ul0\i0\b0 135  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0 136  \cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::~\cb1\cf0 Stack\cb3\cf25 ()\{
\par \cb1\cf0\ul0\i0\b0 137      \cb1\cf0 deleteAll\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 138  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 139  
\par \cb1\cf0\ul0\i0\b0 140  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0 141  \cb3\cf14\b bool \b0\cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 isEmpty\cb3\cf25 () \cb3\cf14\b const\b0\cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 142      \cb3\cf14\b return \b0\cb1\cf0 anchor \cb3\cf25 == \cb3\cf14\b nullptr\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 143  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 144  
\par \cb1\cf0\ul0\i0\b0 145  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0 146  \cb3\cf14\b void \b0\cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 push\cb3\cf25 (\cb3\cf14\b const \b0\cb1\cf0 T\cb3\cf25 & \cb1\cf0 e\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 147      \cb1\cf0 Node\cb3\cf25 * \cb1\cf0 aux\cb3\cf25 (\cb3\cf14\b new \b0\cb1\cf0 Node\cb3\cf25 (\cb1\cf0 e\cb3\cf25 ));
\par \cb1\cf0\ul0\i0\b0 148  
\par \cb1\cf0\ul0\i0\b0 149      \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 aux \cb3\cf25 == \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 150          \cb3\cf14\b throw \b0\cb1\cf0 Exception\cb3\cf25 (\cb3\cf20 "Memoria no disponible, push"\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 151      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 152  
\par \cb1\cf0\ul0\i0\b0 153      \cb1\cf0 aux\cb3\cf25 ->\cb1\cf0 setNext\cb3\cf25 (\cb1\cf0 anchor\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 154  
\par \cb1\cf0\ul0\i0\b0 155      \cb1\cf0 anchor \cb3\cf25 = \cb1\cf0 aux\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 156  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 157  
\par \cb1\cf0\ul0\i0\b0 158  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0 159  \cb1\cf0 T Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 pop\cb3\cf25 ()\{
\par \cb1\cf0\ul0\i0\b0 160      \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 anchor \cb3\cf25 == \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 161          \cb3\cf14\b throw \b0\cb1\cf0 Exception\cb3\cf25 (\cb3\cf20 "Insuficiencia de datos, pop"\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 162      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 163  
\par \cb1\cf0\ul0\i0\b0 164      \cb1\cf0 T result\cb3\cf25 (\cb1\cf0 anchor\cb3\cf25 ->\cb1\cf0 getData\cb3\cf25 ());
\par \cb1\cf0\ul0\i0\b0 165  
\par \cb1\cf0\ul0\i0\b0 166      \cb1\cf0 Node\cb3\cf25 * \cb1\cf0 aux\cb3\cf25 (\cb1\cf0 anchor\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 167  
\par \cb1\cf0\ul0\i0\b0 168      \cb1\cf0 anchor \cb3\cf25 = \cb1\cf0 anchor\cb3\cf25 ->\cb1\cf0 getNext\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 169  
\par \cb1\cf0\ul0\i0\b0 170      \cb3\cf14\b delete \b0\cb1\cf0 aux\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 171  
\par \cb1\cf0\ul0\i0\b0 172      \cb3\cf14\b return \b0\cb1\cf0 result\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 173  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 174  
\par \cb1\cf0\ul0\i0\b0 175  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0 176  \cb1\cf0 T Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb1\cf0 getTop\cb3\cf25 () \cb3\cf14\b const \b0\cb3\cf25 \{
\par \cb1\cf0\ul0\i0\b0 177      \cb3\cf14\b if\b0\cb3\cf25 (\cb1\cf0 anchor \cb3\cf25 == \cb3\cf14\b nullptr\b0\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 178          \cb3\cf14\b throw \b0\cb1\cf0 Exception\cb3\cf25 (\cb3\cf20 "Insuficiencia de datos, getTop"\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 179      \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 180  
\par \cb1\cf0\ul0\i0\b0 181      \cb3\cf14\b return \b0\cb1\cf0 anchor\cb3\cf25 ->\cb1\cf0 getData\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 182  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 183  
\par \cb1\cf0\ul0\i0\b0 184  \cb3\cf14\b template \b0\cb3\cf25 <\cb3\cf14\b class \b0\cb1\cf0 T\cb3\cf25 >
\par \cb1\cf0\ul0\i0\b0 185  \cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >& \cb1\cf0 Stack\cb3\cf25 <\cb1\cf0 T\cb3\cf25 >::\cb3\cf14\b operator \b0\cb3\cf25 = (\cb3\cf14\b const \b0\cb1\cf0 Stack\cb3\cf25 & \cb1\cf0 s\cb3\cf25 )\{
\par \cb1\cf0\ul0\i0\b0 186      \cb1\cf0 deleteAll\cb3\cf25 ();
\par \cb1\cf0\ul0\i0\b0 187  
\par \cb1\cf0\ul0\i0\b0 188      \cb1\cf0 copyAll\cb3\cf25 (\cb1\cf0 s\cb3\cf25 );
\par \cb1\cf0\ul0\i0\b0 189  
\par \cb1\cf0\ul0\i0\b0 190      \cb3\cf14\b return \b0\cb3\cf25 *\cb3\cf14\b this\b0\cb3\cf25 ;
\par \cb1\cf0\ul0\i0\b0 191  \cb3\cf25 \}
\par \cb1\cf0\ul0\i0\b0 192  
\par \cb1\cf0\ul0\i0\b0 193  \cb3\cf16 #endif \cb3\cf4 // STACK_H_INCLUDED
\par }